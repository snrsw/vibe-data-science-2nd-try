from typing import Any, Callable, Dict, Optional, Protocol
import types


class MLflowModule(Protocol):
    def set_tracking_uri(self, uri: str) -> None: ...
    def get_experiment_by_name(self, name: str) -> Optional[Any]: ...
    def create_experiment(self, name: str) -> str: ...
    def active_run(self) -> Any: ...
    def start_run(self, run_name: str, nested: bool = False) -> Any: ...
    def log_params(self, params: Dict[str, Any]) -> None: ...
    def set_tags(self, tags: Dict[str, str]) -> None: ...
    def log_artifacts(self, local_dir: str) -> None: ...
    def log_param(self, key: str, value: Any) -> None: ...
    def log_metrics(self, metrics: Dict[str, float]) -> None: ...
    def log_metric(self, key: str, value: float) -> None: ...
    def log_artifact(self, local_path: str) -> None: ...


InferSignatureCallable = Callable[[Any, Any], Any]

# Define a stub module for mlflow.models
class MLflowModelsModule(types.ModuleType):
    infer_signature: InferSignatureCallable

class MLflowModels(Protocol):
    infer_signature: InferSignatureCallable